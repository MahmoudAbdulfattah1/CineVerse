spring.application.name=cineverse
spring.profiles.active=local
spring.config.import=optional:env.properties
youtube.api.key=${YOUTUBE_API_KEY}
tmdb.api.key=${TMDB_API_KEY}
base.image.url=https://image.tmdb.org/t/p/w500

# Server configuration
spring.devtools.restart.poll-interval=3000
spring.devtools.restart.quiet-period=2000
server.port=8080

# DataSource configuration
spring.datasource.url=jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DATABASE}
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=${PG_USERNAME}
spring.datasource.password=${PG_PASSWORD}
spring.datasource.platform=postgresql
spring.sql.init.encoding=UTF-8
spring.datasource.sql-script-encoding=UTF-8

# JPA/Hibernate settings
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.defer-datasource-initialization=true

# Actuator health check configuration
management.endpoints.web.exposure.include=health

# Cloudinary configuration
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api-key=${CLOUDINARY_API_KEY}
cloudinary.api-secret=${CLOUDINARY_API_SECRET}
cloudinary.image.url=https://res.cloudinary.com/${CLOUDINARY_CLOUD_NAME}/image/upload/v123456/profile-pictures/

# JWT configuration
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION}

# Upload limits
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Email configuration
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${SPRING_MAIL_USERNAME}
spring.mail.password=${SPRING_MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Frontend URL
app.frontend.url=${APP_FRONTEND_URL}

# Error handling configuration
server.error.include-stacktrace=never
server.error.include-message=never

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=${APP_BACKEND_URL}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=email,profile

# Elasticsearch configuration
spring.elasticsearch.uris=${ELASTIC_URI}
spring.elasticsearch.username=elastic
spring.elasticsearch.password=${ELASTIC_PASSWORD}
